# Add resource limits
# Create secrets
apiVersion: "apps/v1beta1"
kind: StatefulSet
metadata:
  name: dspace
  namespace: $NAME
spec:
  serviceName: dspace
  replicas: 1
  template:
    metadata:
      labels:
        app: dspace
    spec:
      containers:
      - name: dspace
        image: 270536341817.dkr.ecr.us-east-1.amazonaws.com/dspace:latest
        lifecycle:
          preStop:
            exec:
              command: ["/prestop.sh"]
        env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $NAME
                key: password
          # These are not dspace values, but are used to bootstrap the container.
          - name: POSTGRES_HOST
            value: postgres
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: $NAME
                key: password
          - name: POSTGRES_PORT
            value: "5432"
          # DSpace configs
          - name: DSPACE_DIR
            value: /opt/dspace
          - name: DSPACE_BASEURL
            value: ${dspace.hostname}
          # DB configs
          - name: DB_URL
            value: jdbc:postgresql://postgres:5432/dspace
          - name: DB_USERNAME
            value: dspace
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $NAME
                key: password
          # Mail configs
          - name: MAIL_SERVER
            value: email-smtp.us-east-1.amazonaws.com
          - name: MAIL_SERVER_PORT
            value: '25'
          # S3 configs
          - name: NAME
            value: $NAME
          - name: S3_BUCKET_SIZE
            value: 5TB
        ports:
          - name: dspace
            containerPort: 80
            protocol: TCP
        volumeMounts:
          - name: aws-config
            mountPath: /config
      initContainers:
      - name: aws-bootstrap
        image: jkosgei/aws-bootstrap
        command:
         - "bash"
         - "-c"
         - |
          namespace="default";
          service="dspace";
          cacert="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt";
          token="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)";
          while true; do
          service=$(curl -s --cacert $cacert --header "Authorization:Bearer $token" https://kubernetes.default.svc/api/v1/namespaces/$namespace/services/$service);
          length=$(echo $service | jq -r '.status.loadBalancer.ingress[0].hostname | length');
          if [ ! "$length" == "0" ]; 
              then break;
          fi
            done
          echo "export DSPACE_HOSTNAME=$loadbalancer" >>/config/config && /entry.sh;
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: aws
                key: access
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: aws
                key: secret
          # AWS Credentials
          - name: NAME
            value: $NAME
          - name: REGION
            value: eu-west-1
          - name: EMAIL
            value: webmaster@knowledgearc.com
        volumeMounts:
          - name: aws-config
            mountPath: /config
  volumeClaimTemplates:
  - metadata:
      name: aws-config
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi